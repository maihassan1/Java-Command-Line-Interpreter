import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.util.HashMap;
import java.util.Map;

public class timingGUI {
    private final JFrame frame;
    private final JPanel chartPanel;
    private final JTable scheduleTable; // Table for scheduling details
    private final DefaultTableModel scheduleTableModel; // Model for the scheduler table
    private final JTextArea statisticsArea; // Text area for statistics
    private final Map<Integer, JPanel> processLines; // Map to track process lines by process number
    private final Map<Integer, Integer> processEndTimes; // Tracks the last end time for each process

    public timingGUI(int numberOfProcesses) {
        // Set up the main frame
        frame = new JFrame("FCAI Scheduling Visualization");
        frame.setSize(1200, 700); // Adjusted size for better layout
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new BorderLayout());

        // Chart panel (center)
        chartPanel = new JPanel();
        chartPanel.setLayout(new GridLayout(numberOfProcesses, 1, 5, 5)); // One row per process
        chartPanel.setPreferredSize(new Dimension(800, numberOfProcesses * 50));
        chartPanel.setBackground(Color.DARK_GRAY);

        JScrollPane chartScrollPane = new JScrollPane(chartPanel);
        chartScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        chartScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);

        frame.add(chartScrollPane, BorderLayout.CENTER);

        // Right-side panel for scheduling details
        String[] columnNames = {"Process", "Arrival Time", "Burst Time", "Waiting Time", "Turnaround Time", "Color"};
        scheduleTableModel = new DefaultTableModel(columnNames, 0);
        scheduleTable = new JTable(scheduleTableModel) {
            // Custom renderer for the "Color" column
            @Override
            public TableCellRenderer getCellRenderer(int row, int column) {
                if (column == 5) { // Color column index
                    return new TableCellRenderer() {
                        @Override
                        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                            JPanel colorPanel = new JPanel();
                            colorPanel.setPreferredSize(new Dimension(20, 20));
                            if (value instanceof String) {
                                colorPanel.setBackground(Color.decode((String) value));
                            }
                            return colorPanel;
                        }
                    };
                }
                return super.getCellRenderer(row, column);
            }
        };
        scheduleTable.setGridColor(Color.GRAY); // Add gridlines
        scheduleTable.setShowGrid(true);
        scheduleTable.setBackground(Color.BLACK);
        scheduleTable.setForeground(Color.WHITE);
        scheduleTable.setFillsViewportHeight(true);

        // Add the table in a scrollable pane
        JScrollPane tableScrollPane = new JScrollPane(scheduleTable);
        tableScrollPane.setPreferredSize(new Dimension(400, 600)); // Fixed width for the right side
        frame.add(tableScrollPane, BorderLayout.EAST);

        // Bottom panel for statistics
        statisticsArea = new JTextArea();
        statisticsArea.setEditable(false);
        statisticsArea.setBackground(Color.BLACK);
        statisticsArea.setForeground(Color.WHITE);

        // Wrap text and enable scrolling
        statisticsArea.setLineWrap(true);
        statisticsArea.setWrapStyleWord(true);
        JScrollPane statisticsScrollPane = new JScrollPane(statisticsArea);
        statisticsScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        statisticsScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        JPanel bottomPanel = new JPanel(new BorderLayout());
        bottomPanel.add(statisticsScrollPane, BorderLayout.CENTER);
        bottomPanel.setPreferredSize(new Dimension(1200, 150)); // Fixed height for the statistics panel

        frame.add(bottomPanel, BorderLayout.SOUTH);

        // Initialize process lines map and end times map
        processLines = new HashMap<>();
        processEndTimes = new HashMap<>();

        // Create rows for Gantt chart
        for (int i = 1; i <= numberOfProcesses; i++) {
            JPanel processLine = new JPanel();
            processLine.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));
            processLine.setBackground(Color.DARK_GRAY);

            // Label for the process name
            JLabel nameLabel = new JLabel("P" + i);
            nameLabel.setOpaque(true);
            nameLabel.setBackground(Color.GRAY);
            nameLabel.setForeground(Color.WHITE);
            nameLabel.setPreferredSize(new Dimension(50, 30));

            // Add the label and line to the chart panel
            processLine.add(nameLabel);
            chartPanel.add(processLine);

            // Map the process number to the row
            processLines.put(i, processLine);

            // Initialize end time for each process
            processEndTimes.put(i, 0);
        }

        // Display the frame
        frame.setVisible(true);
    }

    // Method to update the Gantt chart for a specific process line
    public void updateGanttChart(int startTime, Process p, int execTime) {
        int pnumber = Integer.parseInt(p.ID); // Convert process name to process number
        JPanel processLine = processLines.get(pnumber);

        if (processLine != null) {
            // Calculate idle time
            int lastEndTime = processEndTimes.getOrDefault(pnumber, 0);
            int idleTime = Math.max(0, startTime - lastEndTime); // Idle time before this process runs

            // Add idle time block if necessary
            if (idleTime > 0) {
                JLabel idleBlock = new JLabel();
                idleBlock.setOpaque(true);
                idleBlock.setBackground(Color.DARK_GRAY); // White space for idle time
                idleBlock.setPreferredSize(new Dimension(idleTime * 10, 30));
                processLine.add(idleBlock);
            }

            // Add execution block
            JLabel processBlock = new JLabel();
            processBlock.setOpaque(true);
            processBlock.setBackground(Color.decode(p.color)); // Process color
            processBlock.setPreferredSize(new Dimension(execTime * 10, 30));
            processLine.add(processBlock);

            processEndTimes.put(pnumber, startTime + execTime);

            processLine.revalidate();
            processLine.repaint();
        }
    }

    public void updateSchedule(String process, int arrivalTime, int burstTime, int waitingTime, int turnaroundTime, String color) {
        scheduleTableModel.addRow(new Object[]{process, arrivalTime, burstTime, waitingTime, turnaroundTime, color});
    }

    public void updateStatistics(String statistics) {
        statisticsArea.setText(statistics);
    }
}
