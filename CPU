import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class CPU {
    private JFrame mainFrame;
    private JTextField numProcessesField;
    private JTextField contextSwitchingField;
    private JComboBox<String> algorithmComboBox;
    private JButton startButton;
    private JLabel fileLabel;
    private List<Process> readyQueue;
    private File inputFile = new File("input.txt");

    public CPU() {
        mainFrame = new JFrame("FCAI Scheduling Main Screen");
        mainFrame.setSize(500, 400);
        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        mainFrame.setLayout(new GridLayout(7, 2, 10, 10));

        mainFrame.add(new JLabel("Number of Processes:"));
        numProcessesField = new JTextField();
        numProcessesField.setToolTipText("Enter the total number of processes.");
        mainFrame.add(numProcessesField);

        mainFrame.add(new JLabel("Context Switching Time:"));
        contextSwitchingField = new JTextField();
        contextSwitchingField.setToolTipText("Enter the context switching time in milliseconds.");
        mainFrame.add(contextSwitchingField);

        mainFrame.add(new JLabel("Select Algorithm:"));
        String[] algorithms = {"Priority Scheduling", "Shortest Remaining Time First (SRTF)", "Shortest Job First Scheduling (SJF)", "FCAI Scheduling"};
        algorithmComboBox = new JComboBox<>(algorithms);
        mainFrame.add(algorithmComboBox);
        fileLabel = new JLabel("No file selected");
        mainFrame.add(fileLabel);


        startButton = new JButton("Start Scheduling");
        mainFrame.add(startButton);


        mainFrame.add(new JLabel(""));



        startButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                startScheduling();
            }
        });

        mainFrame.setVisible(true);
    }


    private void startScheduling() {
        try {
            int numberOfProcesses = Integer.parseInt(numProcessesField.getText());
            int contextSwitchingTime = Integer.parseInt(contextSwitchingField.getText());
            String selectedAlgorithm = (String) algorithmComboBox.getSelectedItem();


            if (inputFile == null) {
                JOptionPane.showMessageDialog(mainFrame, "Please select an input file.");
                return;
            }


            loadProcessesFromFile("G:\\Fcai contents\\CPUSchedulersSimulator\\CPUSimulater\\input.txt");


            timingGUI gui = new timingGUI(numberOfProcesses);

            switch (selectedAlgorithm) {
                case "Priority Scheduling":
                    processExecution scheduler = new PriorityScheduling(readyQueue, contextSwitchingTime, gui);
                    scheduler.execute();
                    break;
                case "Shortest Remaining Time First (SRTF)":
                    scheduler = new ShortestRemainingScheduling(readyQueue, contextSwitchingTime, gui);
                    scheduler.execute();
                    break;
                case "Shortest Job First Scheduling (SJF)":
                    scheduler = new ShortJobScheduling(readyQueue, contextSwitchingTime, gui);
                    scheduler.execute();
                    break;
                case "FCAI Scheduling":
                    scheduler = new FCAIFactorScheduling(readyQueue, contextSwitchingTime, gui);
                    scheduler.execute();
                    break;
                default:
                    JOptionPane.showMessageDialog(mainFrame, "Unsupported scheduling algorithm selected.");
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(mainFrame, "Please enter valid numbers for processes and context switching time.");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(mainFrame, "Error reading the input file.");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(mainFrame, "An unexpected error occurred: " + ex.getMessage());
        }
    }

    private void loadProcessesFromFile(String fileName) throws IOException {
        readyQueue = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            String line;
            int id = 1;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(", ");
                String name = parts[0].split(" ")[1];
                String color = parts[1].split(" ")[2];
                double arrivalTime = Double.parseDouble(parts[2].split(" ")[2]);
                int burstTime = Integer.parseInt(parts[3].split(" ")[2]);
                int priority = Integer.parseInt(parts[4].split(" ")[2]);
                int quantum = Integer.parseInt(parts[5].split(" ")[1]);
                readyQueue.add(new Process(Integer.toString(id), priority, burstTime, arrivalTime, name, color, quantum));
                id++;
            }
        }
    }

    public static void main(String[] args) {
        new CPU();
    }
}
